version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.0.3
  docker: circleci/docker@2.2.0
  heroku: circleci/heroku@1.2.6

# Define the jobs we want to run for this project
jobs:
  build_and_nox:
    docker:
      - image: cimg/python:3.10.2
        environment:
          DATABASE_URI: $DATABASE_URI
    steps:
      - checkout
      - restore_cache:
          key: libsodium-{{ arch }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Building libsodium
          command: |
            sudo apt-get update
            sudo apt-get install libtool
            sudo apt-get install autoconf
            set -xe
            if [ -d libsodium ]; then exit 0; fi # restored
            git clone --branch stable https://github.com/jedisct1/libsodium.git
            git -C libsodium checkout b732443c442239c2e0184820e9b23cca0de0828c # 1.0.17
            ( cd libsodium && ./autogen.sh && ./configure )
            make -C libsodium -j$(getconf _NPROCESSORS_ONLN)
      - save_cache:
          key: libsodium-{{ arch }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - libsodium
      - run:
          name: Installing libsodium
          command: |
            sudo make -C libsodium install
              sudo ldconfig
      - python/install-packages:
          pkg-manager: pip
      - python/install-packages:
          pip-dependency-file: requirements.txt
          pkg-manager: pip
      # - python/install-packages:
      #     args: poetry
      #     pkg-manager: pip
      # - python/install-packages:
      #     args: nox
      #     pkg-manager: pip

      # - python/install-packages:
      #     pkg-manager: poetry
      # - restore_cache: # **restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run**
      #     key: pydeps-v01__{{ checksum "requirements.txt" }}
      # - run: # install and activate virtual environment with pip
      #     command: |
      #       python3 -m venv venv
      #       . venv/bin/activate
      #       pip install -r requirements.txt
      # - save_cache: # ** special step to save dependency cache **
      #     key: pydeps-v01__{{ checksum "requirements.txt" }}
      #     paths:
      #       - '.venv'
      #       - '~/.cache/pip'
      # - run:
      #     name: Noxing the codebase
      #     command: |
      #       nox --reuse-existing-virtualenvs --no-install
      - run:
          name: Noxing the codebase
          command: |
            nox
  dockerize:
    # docker:
    #   - image: jevan32/deg-x-api:latest
    #     auth:
    #       username: $DOCKER_HUB_USER
    #       password: $DOCKER_HUB_PASSWORD
    # steps:
    #   - checkout
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: jevan32/deg-x-api:latest
      - docker/login:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD
      - docker/push:
          digest-path: /tmp/digest.txt
          image: jevan32/deg-x-api:latest
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"
  heroku-registry-release:
    # executor: heroku/default
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - heroku/install
      - heroku/push-docker-image:
          process-types: web
      - heroku/release-docker-image

# Orchestrate our job run sequence
workflows:
  nox_and_deploy:
    jobs:
      # - system_dependencies
      - build_and_nox
      - dockerize:
          requires:
            - build_and_nox # Only run docker job once the nox job has completed
          filters:
            branches:
              only: master
      - heroku-registry-release:
          requires:
            - dockerize # Only run deploy job once the docker job has completed
          filters:
            branches:
              only: master
      # - heroku/deploy-via-git:
      #     requires:
      #       - dockerize # Only run deploy job once the docker job has completed
      #     filters:
      #       branches:
      #         only: master
